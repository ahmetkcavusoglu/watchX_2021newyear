/*
  We Wish You a Merry Christmas - Traditional Christmas song
  Connect a piezo buzzer or speaker to pin 11 or select a new pin.
  More songs available at https://github.com/robsoncouto/arduino-songs

                                              Robson Couto, 2019
*/
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define NOTE_B0  31
#define NOTE_C1  33
#define NOTE_CS1 35
#define NOTE_D1  37
#define NOTE_DS1 39
#define NOTE_E1  41
#define NOTE_F1  44
#define NOTE_FS1 46
#define NOTE_G1  49
#define NOTE_GS1 52
#define NOTE_A1  55
#define NOTE_AS1 58
#define NOTE_B1  62
#define NOTE_C2  65
#define NOTE_CS2 69
#define NOTE_D2  73
#define NOTE_DS2 78
#define NOTE_E2  82
#define NOTE_F2  87
#define NOTE_FS2 93
#define NOTE_G2  98
#define NOTE_GS2 104
#define NOTE_A2  110
#define NOTE_AS2 117
#define NOTE_B2  123
#define NOTE_C3  131
#define NOTE_CS3 139
#define NOTE_D3  147
#define NOTE_DS3 156
#define NOTE_E3  165
#define NOTE_F3  175
#define NOTE_FS3 185
#define NOTE_G3  196
#define NOTE_GS3 208
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_DS5 622
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_B5  988
#define NOTE_C6  1047
#define NOTE_CS6 1109
#define NOTE_D6  1175
#define NOTE_DS6 1245
#define NOTE_E6  1319
#define NOTE_F6  1397
#define NOTE_FS6 1480
#define NOTE_G6  1568
#define NOTE_GS6 1661
#define NOTE_A6  1760
#define NOTE_AS6 1865
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
#define NOTE_DS7 2489
#define NOTE_E7  2637
#define NOTE_F7  2794
#define NOTE_FS7 2960
#define NOTE_G7  3136
#define NOTE_GS7 3322
#define NOTE_A7  3520
#define NOTE_AS7 3729
#define NOTE_B7  3951
#define NOTE_C8  4186
#define NOTE_CS8 4435
#define NOTE_D8  4699
#define NOTE_DS8 4978
#define REST      0
//Display
#define OLED_DC     A3
#define OLED_CS     A5
#define OLED_RESET  A4
Adafruit_SSD1306 display(OLED_DC, OLED_RESET, OLED_CS);

const unsigned char PROGMEM chr [] = {
0x00, 0x00, 0x3F, 0x80, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xF0, 0x03, 0xFF, 0xC0, 0x00,
0x00, 0x01, 0xC0, 0x78, 0x07, 0x00, 0xF0, 0x00, 0x00, 0x03, 0x80, 0x1C, 0x0E, 0x00, 0x30, 0x00,
0x00, 0x07, 0x00, 0x0E, 0x0C, 0x00, 0x18, 0x00, 0x00, 0x06, 0x1F, 0x06, 0x18, 0x3E, 0x18, 0x00,
0x01, 0x06, 0x3F, 0xC6, 0x18, 0x7F, 0x0C, 0x00, 0x01, 0x8C, 0x30, 0xC3, 0x18, 0xC1, 0x8C, 0x00,
0x00, 0x0C, 0x60, 0x63, 0x18, 0xC1, 0x80, 0x00, 0x00, 0x0C, 0x60, 0x63, 0x10, 0xC1, 0x80, 0x30,
0x00, 0x0C, 0x60, 0x63, 0x10, 0x81, 0x80, 0x00, 0x00, 0x0C, 0x60, 0xC2, 0x30, 0x81, 0x84, 0x00,
0x00, 0x0C, 0x60, 0xC6, 0x31, 0x81, 0x84, 0x00, 0x08, 0x0C, 0x60, 0x86, 0x31, 0x81, 0x84, 0x00,
0x1C, 0x06, 0x60, 0x06, 0x31, 0x80, 0x84, 0x00, 0x0C, 0x07, 0xE0, 0x0C, 0x31, 0x80, 0x84, 0x00,
0x07, 0x03, 0xC3, 0x0C, 0x31, 0x80, 0x84, 0x38, 0x03, 0x80, 0x06, 0x18, 0x31, 0x81, 0x84, 0x7C,
0x01, 0xC0, 0x0C, 0x38, 0x31, 0x81, 0x8C, 0x6C, 0x00, 0xE0, 0x38, 0x30, 0x30, 0x81, 0x8C, 0x6C,
0x00, 0x00, 0x70, 0x60, 0x10, 0xC1, 0x8C, 0x7C, 0x00, 0x00, 0xE0, 0xC0, 0x18, 0xC1, 0x8C, 0x00,
0x00, 0x03, 0xC1, 0x8C, 0x18, 0xC1, 0x8C, 0x00, 0x00, 0x07, 0x03, 0xFE, 0x18, 0xE3, 0x8C, 0x00,
0x00, 0x0E, 0x07, 0xF3, 0x18, 0x7F, 0x0C, 0x00, 0x3F, 0x0C, 0x00, 0x03, 0x0C, 0x00, 0x18, 0x00,
0x3F, 0x0C, 0x00, 0x03, 0x0C, 0x00, 0x38, 0x00, 0x00, 0x0F, 0x00, 0x07, 0x07, 0x00, 0x70, 0x00,
0x00, 0x07, 0xF8, 0xFE, 0x03, 0xE3, 0xE0, 0x60, 0x00, 0x00, 0xFF, 0xF8, 0x01, 0xFF, 0x80, 0xE0,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80,
0x00, 0x60, 0x00, 0x00, 0x10, 0x00, 0x07, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x10, 0x00, 0x0E, 0x00,
0x03, 0x80, 0x07, 0xFE, 0x00, 0x7C, 0x1C, 0x00, 0x07, 0x00, 0x1F, 0x9F, 0x00, 0xEC, 0x00, 0x00,
0x0E, 0x00, 0x38, 0x03, 0x80, 0xC6, 0x00, 0x00, 0x1C, 0x00, 0x30, 0x00, 0xC0, 0xC6, 0x00, 0x00,
0x18, 0x00, 0x60, 0x00, 0x60, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x63, 0xF8, 0x60, 0xC6, 0x00, 0x00,
0x00, 0x00, 0xC3, 0x9C, 0x60, 0x06, 0x03, 0xF0, 0x00, 0x60, 0xC6, 0x0C, 0x30, 0x06, 0x03, 0xF0,
0x00, 0x40, 0xC6, 0x06, 0x30, 0x06, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x06, 0x30, 0xC6, 0x00, 0x00,
0x00, 0x00, 0xC6, 0x0C, 0x20, 0xC6, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x0C, 0x60, 0xC6, 0x00, 0x00,
0x00, 0x00, 0xC6, 0x0C, 0x60, 0xC6, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x18, 0x60, 0xC6, 0x1C, 0x00,
0x03, 0xC0, 0x66, 0x18, 0xC0, 0xC6, 0x0E, 0x00, 0x07, 0xC0, 0x7C, 0x30, 0xC0, 0xC6, 0x07, 0x00,
0x06, 0x60, 0x18, 0x61, 0x80, 0xC6, 0x03, 0x80, 0x07, 0xE0, 0x00, 0xE1, 0x80, 0xC6, 0x00, 0xC0,
0x03, 0xC0, 0x01, 0xC3, 0x00, 0xC6, 0x00, 0xE0, 0x00, 0x00, 0x03, 0x86, 0x00, 0xC6, 0x00, 0x60,
0x00, 0x00, 0x0E, 0x0E, 0x00, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x1C, 0x00, 0xC6, 0x00, 0x00,
0x00, 0x00, 0x78, 0x3B, 0xE0, 0xC6, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x7F, 0xF0, 0xC6, 0x03, 0x00,
0x00, 0x00, 0xC0, 0x7C, 0x30, 0xC6, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x30, 0xC6, 0x00, 0x00,
0x00, 0x00, 0xC0, 0x00, 0x30, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x70, 0x01, 0xE0, 0xCE, 0x00, 0x00,
0x00, 0x00, 0x31, 0xFF, 0xC0, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFE, 0x00, 0x38, 0x00, 0x00
};


int melody[] = {
  NOTE_G4, NOTE_E5, NOTE_D5,NOTE_C5, NOTE_G4, NOTE_G4, NOTE_E5,NOTE_D5,NOTE_C5,NOTE_A4,
  
  NOTE_A4, NOTE_F5, NOTE_E5,NOTE_D5, NOTE_B4, NOTE_G5, NOTE_G5,NOTE_F5,NOTE_D5,NOTE_E5,
  
  NOTE_G4, NOTE_E5, NOTE_D5,NOTE_C5, NOTE_G4, NOTE_G4,NOTE_E5,NOTE_D5,NOTE_C5,NOTE_A4,
  
   NOTE_A4, NOTE_F5,NOTE_E5, NOTE_D5, NOTE_G5,NOTE_G5,NOTE_G5,NOTE_G5,NOTE_G5,NOTE_A5,NOTE_G5,NOTE_F5,NOTE_D5,NOTE_C5,NOTE_D5,
  
  NOTE_E5, NOTE_E5, NOTE_E5,NOTE_E5, NOTE_E5, NOTE_E5,NOTE_E5,NOTE_G5,NOTE_C5,NOTE_D5,NOTE_E5,
  
  NOTE_F5, NOTE_F5, NOTE_F5,NOTE_F5, NOTE_F5, NOTE_F5,NOTE_E5,NOTE_E5,NOTE_E5,NOTE_E5,NOTE_E5,NOTE_D5,NOTE_D5,NOTE_E5,NOTE_D5,NOTE_G5,

  NOTE_E5, NOTE_E5, NOTE_E5,NOTE_E5, NOTE_E5, NOTE_E5,NOTE_E5,NOTE_G5,NOTE_C5,NOTE_D5,NOTE_E5,
  
  NOTE_F5, NOTE_F5, NOTE_F5,NOTE_F5, NOTE_F5, NOTE_F5,NOTE_E5,NOTE_E5,NOTE_E5,NOTE_E5,NOTE_G5,NOTE_G5,NOTE_F5,NOTE_D5,NOTE_C5
};

// note durations: 4 = quarter note, 8 = eighth note, etc.:
int noteDurations[] = {
  8,8,8,8,2,8,8,8,8,2,
  8,8,8,8,2,8,8,8,8,2,
  8,8,8,8,2,8,8,8,8,2,
  8,8,8,8,8,8,8,16,16,8,8,8,8,4,4,
  8,8,4,8,8,4,8,8,8,8,2,
  8,8,8,16,16,8,8,8,16,16,8,8,8,8,4,4,
  8,8,4,8,8,4,8,8,8,8,2,
  8,8,8,16,16,8,8,8,16,16,8,8,8,8
};
void setup() {

  pinMode(13, OUTPUT);
  pinMode(6, OUTPUT);
  display.begin(SSD1306_SWITCHCAPVCC);
  display.clearDisplay();
  // iterate over the notes of the melody.
  // Remember, the array is twice the number of notes (notes + durations)
  for (int thisNote = 0; thisNote < 98; thisNote++) {

    // calculates the duration of each note
    int noteDuration = 1000 / noteDurations[thisNote];
    tone(9, melody[thisNote], noteDuration);
    digitalWrite(6, HIGH);
    digitalWrite(13, HIGH);
    display.setTextSize(2);
    display.setTextColor(WHITE);
    display.setCursor(68, 5);
    display.print(F("Happy"));
    display.setCursor(78, 25);
    display.print(F("New"));
    display.setCursor(74, 45);
    display.print(F("Year"));

    display.drawBitmap(0, 0, chr, 64, 64, 1);
    display.display();

    // Wait for the specief duration before playing the next note.
    int pauseBetweenNotes = noteDuration +50;
    delay(pauseBetweenNotes);
    // stop the tone playing:
    noTone(9);
    digitalWrite(6, LOW);
    digitalWrite(13, LOW);
    delay(30);
  }
}

void loop() {
  // no need to repeat the melody.

  // Wait for the specief duration before playing the next note.

}
